<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>csharp on atreezilla</title><link>https://atreezilla.com/tags/csharp.html</link><description>Recent content in csharp on atreezilla</description><generator>Hugo -- gohugo.io</generator><language>ru-ru</language><lastBuildDate>Fri, 26 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://atreezilla.com/tags/csharp/index.xml" rel="self" type="application/rss+xml"/><item><title>–ê—Ä—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ C#</title><link>https://atreezilla.com/posts/csharp-arithmetic-operations.html</link><pubDate>Fri, 26 Mar 2021 00:00:00 +0000</pubDate><guid>https://atreezilla.com/posts/csharp-arithmetic-operations.html</guid><description>–ê—Ä—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ üîó+,-,*,/,%,++,--
–ü–æ—Ä–∞–∑—Ä—è–¥–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
&amp;amp;(–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —É–º–Ω–æ–∂–µ–Ω–∏–µ),|(–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Å–ª–æ–∂–µ–Ω–∏–µ),^(–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –∏—Å–∫–ª—é—á–∞—é—â–µ–µ –ò–õ–ò),~ (–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ –∏–ª–∏ –∏–Ω–≤–µ—Ä—Å–∏—è)
–û–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è
+=, -=, *=,/= ,%= ,&amp;amp;= ,|= ,^= , &amp;lt;&amp;lt;=, &amp;gt;&amp;gt;=
–£—Å–ª–æ–≤–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
==,!=,&amp;lt;,&amp;gt;,&amp;lt;=,&amp;gt;=,|,^,&amp;amp;,||,&amp;amp;&amp;amp;,!
–í –∫–∞–∫–∏–µ —Ç–∏–ø—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç—Å—è
byte -&amp;gt; short, ushort, int, uint, long, ulong, float, double, decimal
sbyte -&amp;gt; short, int, long, float, double, decimal
short -&amp;gt; int, long, float, double, decimal
ushort -&amp;gt; int, uint, long, ulong, float, double, decimal
int -&amp;gt; long, float, double, decimal</description></item><item><title>–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö C#</title><link>https://atreezilla.com/posts/csharp-data-types.html</link><pubDate>Fri, 26 Mar 2021 00:00:00 +0000</pubDate><guid>https://atreezilla.com/posts/csharp-data-types.html</guid><description>–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö üîóbool isStupid = false; bool isSmarty = true; //(1 –±–∞–π—Ç) System.Boolean byte _month = 1; byte DayOfWeek = 102; //(1 –±–∞–π—Ç) –æ—Ç 0 –¥–æ 255 System.Byte sbyte t1 = -101; sbyte t2 = 102; //(1 –±–∞–π—Ç) —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç -128 –¥–æ 127 System.SByte short n1 = 1; short n2 = 102; //(2 –±–∞–π—Ç–∞) —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç -32768 –¥–æ 32767 System.Int16 ushort un1 = 1; ushort un2 = 102; //(2 –±–∞–π—Ç–∞) —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 65535 System.</description></item><item><title>–£—Å–ª–æ–≤–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ C#</title><link>https://atreezilla.com/posts/csharp-conditional-constructs.html</link><pubDate>Fri, 26 Mar 2021 00:00:00 +0000</pubDate><guid>https://atreezilla.com/posts/csharp-conditional-constructs.html</guid><description>–£—Å–ª–æ–≤–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ üîóvar x=11; if(x &amp;gt; 2){ Console.WriteLine($&amp;#34;–ß–∏—Å–ª–æ {x} –±–æ–ª—å—à–µ —á–∏—Å–ª–∞ 2&amp;#34;);} else if (x &amp;lt; 2){ Console.WriteLine($&amp;#34;–ß–∏—Å–ª–æ {x} –º–µ–Ω—å—à–µ —á–∏—Å–ª–∞ 2&amp;#34;);} string selection=&amp;#34;&amp;#34;; switch (selection) { case &amp;#34;Y&amp;#34;: Console.WriteLine(&amp;#34;–í—ã –Ω–∞–∂–∞–ª–∏ –±—É–∫–≤—É Y&amp;#34;); break; case &amp;#34;N&amp;#34;: Console.WriteLine(&amp;#34;–í—ã –Ω–∞–∂–∞–ª–∏ –±—É–∫–≤—É N&amp;#34;); break; default: Console.WriteLine(&amp;#34;–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –±—É–∫–≤—É&amp;#34;); break; } int z = selection==&amp;#34;Y&amp;#34;? (1+2) : (3-1);</description></item><item><title>–¶–∏–∫–ª—ã C#</title><link>https://atreezilla.com/posts/csharp-cycles-.html</link><pubDate>Fri, 26 Mar 2021 00:00:00 +0000</pubDate><guid>https://atreezilla.com/posts/csharp-cycles-.html</guid><description>–¶–∏–∫–ª—ã üîóint i = 60; while (i &amp;gt; 0) { Console.WriteLine(Convert.ToString(i, 2).PadLeft(8, &amp;#39;0&amp;#39;)); i--; } for (int i = 0; i &amp;lt; 9; i++) { if (i == 5) break; //continue; Console.Write(i); } i = -1; do { Console.Write(i); i--; } while (i &amp;gt; 0); int[] numbers = new int[] { 1, 2, 3, 4, 5 }; foreach (int i in numbers) { Console.Write(i); }</description></item></channel></rss>